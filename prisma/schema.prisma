// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  fullName  String?
  username  String?  @unique
  email     String   @unique
  password  String?
  avatar    String?
  active    Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  twoFa TwoFa?

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")

  channels  Channel[]  @relation("CreatedChannels")
  messages  Message[]  @relation("UserMessages")
  userRoles UserRole[]
}

model UserRole {
  id        Int     @id @default(autoincrement())
  userId    String
  channelId String
  role      String
  user      User    @relation(fields: [userId], references: [id])
  channel   Channel @relation(fields: [channelId], references: [id])

  @@unique([userId, channelId, role])
}

model TwoFa {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Followers", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId]) // Unique combo
}

model Channel {
  id          String     @id @default(uuid())
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  creatorId   String
  creator     User       @relation("CreatedChannels", fields: [creatorId], references: [id])
  messages    Message[]
  UserRole    UserRole[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  channelId String
  userId    String
  user      User     @relation("UserMessages", fields: [userId], references: [id])
  channel   Channel  @relation(fields: [channelId], references: [id])
}
